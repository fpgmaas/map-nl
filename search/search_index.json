{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#map-nl","title":"map-nl","text":"<p>map-nl is a Python package to help you quickly create PC4 maps of the Netherlands, i.e. maps based on the numerical part of Dutch postal codes. While that is already possible without map-nl, this package aims to make the process a lot easier. It automatically downloads the geojson files, so all you need to provide is a dataset with two columns: One containing PC4 codes and one with a related value to plot on the map. map-nl then uses folium to plot the map.</p> <p>For an example map created with map-nl, see here.</p>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#installation","title":"Installation","text":"<p>To install map-nl, simply run:</p> <pre><code>pip install map-nl\n</code></pre> <p>or a similar command for your dependency manager.</p>"},{"location":"#usage","title":"Usage","text":"<p>To create a choropleth map of the average WOZ-value in the Netherlands, you could run the following:</p> <pre><code>import pandas as pd\nfrom map_nl import ChoroplethMapNL\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/fpgmaas/map-nl/main/data/woz-pc4.csv\")\n\nm = ChoroplethMapNL(geojson_simplify_tolerance=0.0001).plot(\n    df,\n    pc4_column_name=\"pc4\",\n    value_column_name=\"WOZ\",\n    legend_name=\"Average WOZ Value\"\n)\nm.save(\"map.html\")\n</code></pre> <p>This will download the geojson file to the <code>.map_nl</code> directory, simplify the geojson file to reduce the disk size of the plot, plot the map and save it to disk.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to <code>map-nl</code>","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/fpgmaas/map-nl/issues</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/fpgmaas/map-nl/issues.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"CONTRIBUTING/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>map-nl</code> for local development. Please note this documentation assumes you already have <code>poetry</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>map-nl</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>cd &lt;directory_in_which_repo_should_be_created&gt;\ngit clone git@github.com:YOUR_NAME/map-nl.git\n</code></pre> <ol> <li>Now we need to install the environment. Navigate into the directory</li> </ol> <pre><code>cd map-nl\n</code></pre> <p>If you are using <code>pyenv</code>, select a version to use locally. (See installed versions with <code>pyenv versions</code>)</p> <pre><code>pyenv local &lt;x.y.z&gt;\n</code></pre> <p>Then, install and activate the environment with:</p> <pre><code>poetry install\npoetry shell\n</code></pre> <ol> <li>Install pre-commit to run linters/formatters at commit time:</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li> <p>Don't forget to add test cases for your added functionality to the <code>tests</code> directory.</p> </li> <li> <p>When you're done making changes, check that your changes pass the formatting tests.</p> </li> </ol> <pre><code>make check\n</code></pre> <p>Now, validate that all unit tests are passing:</p> <pre><code>make test\n</code></pre> <ol> <li>Before raising a pull request you should also run tox.    This will run the tests across different versions of Python:</li> </ol> <pre><code>tox\n</code></pre> <p>This requires you to have multiple versions of python installed. This step is also triggered in the CI/CD pipeline, so you could also choose to skip this step locally.</p> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li> <p>The pull request should include tests.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in <code>README.md</code>.</p> </li> </ol>"},{"location":"modules/","title":"API reference","text":""},{"location":"modules/#map_nl.MapNL","title":"<code>map_nl.MapNL</code>","text":"<p>             Bases: <code>BaseMapNL</code></p> <p>A class for creating custom PC4 maps of the Netherlands using <code>folium.GeoJson</code>.</p> Source code in <code>map_nl/map/map.py</code> <pre><code>class MapNL(BaseMapNL):\n    \"\"\"A class for creating custom PC4 maps of the Netherlands using `folium.GeoJson`.\"\"\"\n\n    def plot(self, df: pd.DataFrame, value_column_name: str, pc4_column_name: str, **kwargs) -&gt; folium.Map:  # type: ignore\n        \"\"\"Creates and adds a custom map layer to the Folium map instance.\n\n        This method processes the input DataFrame and GeoJSON data to create a\n        Folium GeoJson layer, which is then added to the map.\n\n        You can also pass any arguments to this function that are accepted by `folium.GeoJson`. For example,\n        to add custom fill colors to the plot based on the column 'my_feature' in the DataFrame `df`, do the following:\n\n        ```\n        def get_color(value):\n            if not value:\n                return \"grey\"\n            if value &gt; 500:\n                return \"green\"\n            else:\n                return \"blue\"\n\n        def style(feature):\n            return {\"fillColor\": get_color(feature.get(\"properties\").get(\"my_feature\"))}\n\n        m = MapNL(geojson_simplify_tolerance=0.0001).plot(\n            df, pc4_column_name=\"pc4\", value_column_name=\"my_feature\", style_function=style\n        )\n        ```\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the data for the map.\n            value_column_name (str): Name of the column in df that contains the values to be visualized.\n            pc4_column_name (str): Name of the column in df that contains the PC4 area codes.\n            **kwargs: Additional keyword arguments to customize the GeoJson layer.\n\n        Returns:\n            folium.Map: The Folium Map object with the custom layer added.\n        \"\"\"\n\n        df = self._prepare_input_data(df, pc4_column_name)\n        pc4_geojson = self._get_geojson()\n        pc4_geojson = self._add_values_to_geojson(pc4_geojson, df)\n        tooltip = self._get_default_tooltip(value_column_name)\n\n        default_args = {\n            \"weight\": 1,\n            \"opacity\": 1,\n            \"color\": \"black\",\n            \"dashArray\": \"3\",\n            \"fillOpacity\": 0.7,\n            \"tooltip\": tooltip,\n        }\n\n        plot_args = {**default_args, **kwargs}\n        folium.GeoJson(pc4_geojson, **plot_args).add_to(self.m)\n\n        folium.LayerControl().add_to(self.m)\n\n        return self.m\n\n    @staticmethod\n    def _prepare_input_data(df: pd.DataFrame, pc4_column_name: str) -&gt; pd.DataFrame:\n        df.rename(columns={pc4_column_name: \"pc4_code\"}, inplace=True)\n        df[\"pc4_code\"] = df[\"pc4_code\"].astype(\"str\")\n        return df\n\n    @staticmethod\n    def _add_values_to_geojson(geojson: dict, df: pd.DataFrame) -&gt; dict:\n        gdf = gpd.GeoDataFrame.from_features(geojson[\"features\"])\n        merged_gdf = gdf.merge(df, on=\"pc4_code\", how=\"left\")\n        return merged_gdf.to_json()\n\n    @staticmethod\n    def _get_default_tooltip(value_column_name: str) -&gt; folium.GeoJsonTooltip:\n        return folium.GeoJsonTooltip(\n            fields=[\"pc4_code\", \"gem_name\", value_column_name],\n            aliases=[\"PC4:\", \"Gemeente:\", f\"{value_column_name}:\"],\n            localize=True,\n            sticky=False,\n            labels=True,\n            style=\"\"\"\n                background-color: #F0EFEF;\n                border: 2px solid black;\n                border-radius: 3px;\n                box-shadow: 3px;\n            \"\"\",\n            max_width=800,\n        )\n</code></pre>"},{"location":"modules/#map_nl.MapNL.__init__","title":"<code>__init__(url='https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin', data_dir='.map_nl', geojson_simplify_tolerance=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to download the GeoJSON file. Defaults to a file from https://public.opendatasoft.com.</p> <code>'https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin'</code> <code>data_dir</code> <code>str</code> <p>Directory to save the downloaded GeoJSON file. Defaults to <code>.map_nl</code>.</p> <code>'.map_nl'</code> <code>geojson_simplify_tolerance</code> <code>float | None</code> <p>Tolerance level for GeoJSON simplification. If None, no simplification is performed. Lower values lead to simpler maps. Sensible values for coordinates stored in degrees are in the range of 0.0001 to 10. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to the folium.Map() function. By default, only <code>location</code> and <code>zoom_start</code> are passed with default values.</p> <code>{}</code> Source code in <code>map_nl/map/base.py</code> <pre><code>def __init__(  # type: ignore\n    self,\n    url: str = \"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin\",\n    data_dir: str = \".map_nl\",\n    geojson_simplify_tolerance: float | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Args:\n        url (str, optional): URL to download the GeoJSON file. Defaults to a file from https://public.opendatasoft.com.\n        data_dir (str, optional): Directory to save the downloaded GeoJSON file. Defaults to `.map_nl`.\n        geojson_simplify_tolerance (float | None, optional): Tolerance level for GeoJSON simplification.\n            If None, no simplification is performed. Lower values lead to simpler maps. Sensible values for\n            coordinates stored in degrees are in the range of 0.0001 to 10. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to the folium.Map() function. By default, only `location`\n            and `zoom_start` are passed with default values.\n    \"\"\"\n    self.geojson_simplify_tolerance = geojson_simplify_tolerance\n    self.geojson_path = Path(data_dir) / \"nl-pc4-map.geojson\"\n    self.url = url\n\n    Path(data_dir).mkdir(parents=True, exist_ok=True)\n\n    map_args = {**DEFAULT_MAP_ARGS, **kwargs}\n    self.m = folium.Map(**map_args)\n</code></pre>"},{"location":"modules/#map_nl.MapNL.plot","title":"<code>plot(df, value_column_name, pc4_column_name, **kwargs)</code>","text":"<p>Creates and adds a custom map layer to the Folium map instance.</p> <p>This method processes the input DataFrame and GeoJSON data to create a Folium GeoJson layer, which is then added to the map.</p> <p>You can also pass any arguments to this function that are accepted by <code>folium.GeoJson</code>. For example, to add custom fill colors to the plot based on the column 'my_feature' in the DataFrame <code>df</code>, do the following:</p> <pre><code>def get_color(value):\n    if not value:\n        return \"grey\"\n    if value &gt; 500:\n        return \"green\"\n    else:\n        return \"blue\"\n\ndef style(feature):\n    return {\"fillColor\": get_color(feature.get(\"properties\").get(\"my_feature\"))}\n\nm = MapNL(geojson_simplify_tolerance=0.0001).plot(\n    df, pc4_column_name=\"pc4\", value_column_name=\"my_feature\", style_function=style\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the data for the map.</p> required <code>value_column_name</code> <code>str</code> <p>Name of the column in df that contains the values to be visualized.</p> required <code>pc4_column_name</code> <code>str</code> <p>Name of the column in df that contains the PC4 area codes.</p> required <code>**kwargs</code> <p>Additional keyword arguments to customize the GeoJson layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Map</code> <p>folium.Map: The Folium Map object with the custom layer added.</p> Source code in <code>map_nl/map/map.py</code> <pre><code>def plot(self, df: pd.DataFrame, value_column_name: str, pc4_column_name: str, **kwargs) -&gt; folium.Map:  # type: ignore\n    \"\"\"Creates and adds a custom map layer to the Folium map instance.\n\n    This method processes the input DataFrame and GeoJSON data to create a\n    Folium GeoJson layer, which is then added to the map.\n\n    You can also pass any arguments to this function that are accepted by `folium.GeoJson`. For example,\n    to add custom fill colors to the plot based on the column 'my_feature' in the DataFrame `df`, do the following:\n\n    ```\n    def get_color(value):\n        if not value:\n            return \"grey\"\n        if value &gt; 500:\n            return \"green\"\n        else:\n            return \"blue\"\n\n    def style(feature):\n        return {\"fillColor\": get_color(feature.get(\"properties\").get(\"my_feature\"))}\n\n    m = MapNL(geojson_simplify_tolerance=0.0001).plot(\n        df, pc4_column_name=\"pc4\", value_column_name=\"my_feature\", style_function=style\n    )\n    ```\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the data for the map.\n        value_column_name (str): Name of the column in df that contains the values to be visualized.\n        pc4_column_name (str): Name of the column in df that contains the PC4 area codes.\n        **kwargs: Additional keyword arguments to customize the GeoJson layer.\n\n    Returns:\n        folium.Map: The Folium Map object with the custom layer added.\n    \"\"\"\n\n    df = self._prepare_input_data(df, pc4_column_name)\n    pc4_geojson = self._get_geojson()\n    pc4_geojson = self._add_values_to_geojson(pc4_geojson, df)\n    tooltip = self._get_default_tooltip(value_column_name)\n\n    default_args = {\n        \"weight\": 1,\n        \"opacity\": 1,\n        \"color\": \"black\",\n        \"dashArray\": \"3\",\n        \"fillOpacity\": 0.7,\n        \"tooltip\": tooltip,\n    }\n\n    plot_args = {**default_args, **kwargs}\n    folium.GeoJson(pc4_geojson, **plot_args).add_to(self.m)\n\n    folium.LayerControl().add_to(self.m)\n\n    return self.m\n</code></pre>"},{"location":"modules/#map_nl.map.choropleth.ChoroplethMapNL","title":"<code>map_nl.map.choropleth.ChoroplethMapNL</code>","text":"<p>             Bases: <code>BaseMapNL</code></p> <p>A class for creating Choropleth maps of the Netherlands using <code>folium.Choropleth</code>.</p> Source code in <code>map_nl/map/choropleth.py</code> <pre><code>class ChoroplethMapNL(BaseMapNL):\n    \"\"\"A class for creating Choropleth maps of the Netherlands using `folium.Choropleth`.\"\"\"\n\n    def plot(  # type: ignore\n        self, df: pd.DataFrame, value_column_name: str, pc4_column_name: str, tooltip: bool = True, **kwargs\n    ) -&gt; folium.Map:\n        \"\"\"This method takes a pandas DataFrame with PC4-data and plots a Choropleth map based on these data.\n        Any **kwargs are passed on to `folium.Choropleth`. For example, to change the fill color, run\n\n        ```\n        m = ChoroplethMapNL(...).plot(..., fill_opacity=1)\n        ```\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the data for the Choropleth map.\n            value_column_name (str): Name of the column in df that contains the values to be visualized.\n            pc4_column_name (str): Name of the column in df that contains the postal code (PC4) information.\n            tooltip (bool): Add a simple tooltip.\n            **kwargs: Additional arguments that are passed to `folium.Choropleth`.\n\n        Returns:\n            folium.Map: The Folium Map object with the Choropleth layer added.\n        \"\"\"\n\n        pc4_geojson = self._get_geojson()\n\n        default_args = {\n            \"geo_data\": pc4_geojson,\n            \"name\": \"choropleth\",\n            \"data\": df,\n            \"columns\": [pc4_column_name, value_column_name],\n            \"key_on\": \"feature.properties.pc4_code\",\n            \"fill_color\": \"Blues\",\n            \"fill_opacity\": 0.8,\n            \"line_opacity\": 0.2,\n            \"nan_fill_color\": \"white\",\n        }\n        choropleth_args = {**default_args, **kwargs}\n\n        choropleth = folium.Choropleth(**choropleth_args).add_to(self.m)\n\n        if tooltip:\n            self._add_tooltip(choropleth, df, pc4_column_name, value_column_name)\n\n        folium.LayerControl().add_to(self.m)\n\n        return self.m\n\n    @staticmethod\n    def _get_default_tooltip(value_column_name: str) -&gt; folium.GeoJsonTooltip:\n        return folium.GeoJsonTooltip(\n            fields=[\"pc4_code\", \"gem_name\", value_column_name],\n            aliases=[\"PC4:\", \"Gemeente:\", f\"{value_column_name}:\"],\n            localize=True,\n            sticky=False,\n            labels=True,\n            style=\"\"\"\n                background-color: #F0EFEF;\n                border: 2px solid black;\n                border-radius: 3px;\n                box-shadow: 3px;\n            \"\"\",\n            max_width=800,\n        )\n\n    def _add_tooltip(\n        self, choropleth: folium.Choropleth, df: pd.DataFrame, pc4_column_name: str, value_column_name: str\n    ) -&gt; None:\n        df_indexed = df.set_index(pc4_column_name)\n        for s in choropleth.geojson.data[\"features\"]:\n            pc4_code = int(s.get(\"properties\")[\"pc4_code\"])\n            if pc4_code in df_indexed.index:\n                s[\"properties\"][value_column_name] = str(df_indexed.loc[pc4_code, value_column_name])\n            else:\n                s[\"properties\"][value_column_name] = None\n        tooltip = self._get_default_tooltip(value_column_name)\n        tooltip.add_to(choropleth.geojson)\n</code></pre>"},{"location":"modules/#map_nl.map.choropleth.ChoroplethMapNL.__init__","title":"<code>__init__(url='https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin', data_dir='.map_nl', geojson_simplify_tolerance=None, **kwargs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to download the GeoJSON file. Defaults to a file from https://public.opendatasoft.com.</p> <code>'https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin'</code> <code>data_dir</code> <code>str</code> <p>Directory to save the downloaded GeoJSON file. Defaults to <code>.map_nl</code>.</p> <code>'.map_nl'</code> <code>geojson_simplify_tolerance</code> <code>float | None</code> <p>Tolerance level for GeoJSON simplification. If None, no simplification is performed. Lower values lead to simpler maps. Sensible values for coordinates stored in degrees are in the range of 0.0001 to 10. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to the folium.Map() function. By default, only <code>location</code> and <code>zoom_start</code> are passed with default values.</p> <code>{}</code> Source code in <code>map_nl/map/base.py</code> <pre><code>def __init__(  # type: ignore\n    self,\n    url: str = \"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/georef-netherlands-postcode-pc4/exports/geojson?lang=en&amp;timezone=Europe%2FBerlin\",\n    data_dir: str = \".map_nl\",\n    geojson_simplify_tolerance: float | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Args:\n        url (str, optional): URL to download the GeoJSON file. Defaults to a file from https://public.opendatasoft.com.\n        data_dir (str, optional): Directory to save the downloaded GeoJSON file. Defaults to `.map_nl`.\n        geojson_simplify_tolerance (float | None, optional): Tolerance level for GeoJSON simplification.\n            If None, no simplification is performed. Lower values lead to simpler maps. Sensible values for\n            coordinates stored in degrees are in the range of 0.0001 to 10. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to the folium.Map() function. By default, only `location`\n            and `zoom_start` are passed with default values.\n    \"\"\"\n    self.geojson_simplify_tolerance = geojson_simplify_tolerance\n    self.geojson_path = Path(data_dir) / \"nl-pc4-map.geojson\"\n    self.url = url\n\n    Path(data_dir).mkdir(parents=True, exist_ok=True)\n\n    map_args = {**DEFAULT_MAP_ARGS, **kwargs}\n    self.m = folium.Map(**map_args)\n</code></pre>"},{"location":"modules/#map_nl.map.choropleth.ChoroplethMapNL.plot","title":"<code>plot(df, value_column_name, pc4_column_name, tooltip=True, **kwargs)</code>","text":"<p>This method takes a pandas DataFrame with PC4-data and plots a Choropleth map based on these data. Any **kwargs are passed on to <code>folium.Choropleth</code>. For example, to change the fill color, run</p> <pre><code>m = ChoroplethMapNL(...).plot(..., fill_opacity=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the data for the Choropleth map.</p> required <code>value_column_name</code> <code>str</code> <p>Name of the column in df that contains the values to be visualized.</p> required <code>pc4_column_name</code> <code>str</code> <p>Name of the column in df that contains the postal code (PC4) information.</p> required <code>tooltip</code> <code>bool</code> <p>Add a simple tooltip.</p> <code>True</code> <code>**kwargs</code> <p>Additional arguments that are passed to <code>folium.Choropleth</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Map</code> <p>folium.Map: The Folium Map object with the Choropleth layer added.</p> Source code in <code>map_nl/map/choropleth.py</code> <pre><code>def plot(  # type: ignore\n    self, df: pd.DataFrame, value_column_name: str, pc4_column_name: str, tooltip: bool = True, **kwargs\n) -&gt; folium.Map:\n    \"\"\"This method takes a pandas DataFrame with PC4-data and plots a Choropleth map based on these data.\n    Any **kwargs are passed on to `folium.Choropleth`. For example, to change the fill color, run\n\n    ```\n    m = ChoroplethMapNL(...).plot(..., fill_opacity=1)\n    ```\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the data for the Choropleth map.\n        value_column_name (str): Name of the column in df that contains the values to be visualized.\n        pc4_column_name (str): Name of the column in df that contains the postal code (PC4) information.\n        tooltip (bool): Add a simple tooltip.\n        **kwargs: Additional arguments that are passed to `folium.Choropleth`.\n\n    Returns:\n        folium.Map: The Folium Map object with the Choropleth layer added.\n    \"\"\"\n\n    pc4_geojson = self._get_geojson()\n\n    default_args = {\n        \"geo_data\": pc4_geojson,\n        \"name\": \"choropleth\",\n        \"data\": df,\n        \"columns\": [pc4_column_name, value_column_name],\n        \"key_on\": \"feature.properties.pc4_code\",\n        \"fill_color\": \"Blues\",\n        \"fill_opacity\": 0.8,\n        \"line_opacity\": 0.2,\n        \"nan_fill_color\": \"white\",\n    }\n    choropleth_args = {**default_args, **kwargs}\n\n    choropleth = folium.Choropleth(**choropleth_args).add_to(self.m)\n\n    if tooltip:\n        self._add_tooltip(choropleth, df, pc4_column_name, value_column_name)\n\n    folium.LayerControl().add_to(self.m)\n\n    return self.m\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>map-nl currently has two classes to help you create a PC4 map of the Netherlands: <code>MapNL</code> and <code>ChoroplethMapNL</code>. <code>ChoroplethMapNL</code> a wrapper around <code>folium.Choropleth</code>, and <code>MapNL</code> is a wrapper around <code>folium.GeoJson</code>. Both require a pandas DataFrame with at least two columns; one containing the PC4 codes, and one containing a value to plot. For example:</p> pc4 WOZ 2343 200 3544 250 ... ..."},{"location":"usage/#choroplethmapnl","title":"ChoroplethMapNL","text":"<p><code>ChoroplethMapNL</code> allows you to create a PC4 choropleth map of the Netherlands.</p> <p>An example is shown below.</p> <pre><code>import pandas as pd\nfrom map_nl import ChoroplethMapNL\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/fpgmaas/map-nl/main/data/woz-pc4.csv\")\nm = ChoroplethMapNL(geojson_simplify_tolerance=0.0001).plot(\n    df,\n    pc4_column_name=\"pc4\",\n    value_column_name=\"WOZ\",\n    legend_name=\"Average WOZ Value\"\n)\nm.save(\"map.html\")\n</code></pre> <p>Any other keyword-arguments passed to <code>plot()</code> are passed on to <code>folium.Choropleth</code>. For example, in order to change the colorscale that is used to fill the polygons, you could do:</p> <pre><code>m = ChoroplethMapNL(geojson_simplify_tolerance=0.0001).plot(\n    df,\n    pc4_column_name=\"pc4\",\n    value_column_name=\"WOZ\",\n    legend_name=\"Average WOZ Value\",\n    fill_color = \"OrRd\"\n)\n</code></pre> <p>For more customization options, see the documentation of <code>folium.Choropleth</code>.</p>"},{"location":"usage/#mapnl","title":"MapNL","text":"<p><code>MapNL</code> allows you to create a custom PC4 map of the Netherlands.</p> <p>An example is shown below.</p> <pre><code>import pandas as pd\nfrom map_nl import MapNL\n\ndef get_color(value):\n    if not value:\n        return \"grey\"\n    if value &gt; 500:\n        return \"green\"\n    else:\n        return \"blue\"\n\ndef style(feature):\n    return {\"fillColor\": get_color(feature.get(\"properties\").get(\"WOZ\"))}\n\ndf = pd.read_csv(\"data/woz-pc4.csv\")\nm = MapNL(geojson_simplify_tolerance=0.0001).plot(\n    df, pc4_column_name=\"pc4\", value_column_name=\"WOZ\", style_function=style, name=\"WOZ value\"\n)\nm.save(\"map.html\")\n</code></pre> <p>The above example will color any PC4-areas with a average WOZ above 500 green, blue if it is below 500, and grey if no average WOZ was found.</p> <p>Any other keyword-arguments passed to <code>plot()</code> are passed on to <code>folium.GeoJson</code>. For example, in order to modify the default tooltip, you can define your own and provide that to the <code>plot()</code> method:</p> <pre><code>tooltip = folium.GeoJsonTooltip(\n    fields=[\"pc4_code\", \"gem_name\", \"WOZ\"],\n    aliases=[\"PC4:\", \"Gemeente:\", \"WOZ:\"],\n    localize=True,\n    sticky=False,\n    labels=True,\n    style=\"\"\"\n        background-color: #F0EFEF;\n        border: 3px solid black;\n        border-radius: 10px;\n        box-shadow: 10px;\n    \"\"\",\n    max_width=800,\n)\n\nm = MapNL(geojson_simplify_tolerance=0.0001).plot(\n    df,\n    pc4_column_name=\"pc4\",\n    value_column_name=\"WOZ\",\n    style_function=style,\n    name=\"WOZ value\",\n    tooltip=tooltip\n)\n</code></pre> <p>For more customization options, see the documentation of <code>folium.GeoJson</code>.</p>"},{"location":"usage/#customizing-the-map","title":"Customizing the map","text":"<p>Keyword arguments passed to the constructors of <code>MapNL</code> and <code>ChoroplethMapNL</code> are passed on to <code>folium.Map</code>. So for example, in order to change the starting zoom level of the map, one could do:</p> <pre><code>m = ChoroplethMapNL(geojson_simplify_tolerance=0.0001, zoom_start=7)\n</code></pre> <p>For more customization options, see the documentation of <code>folium.Map</code>.</p>"}]}